// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orders/{order_uid}": {
            "get": {
                "description": "Возвращает заказ по уникальному идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Получить заказ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор заказа",
                        "name": "order_uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными заказа",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpt.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/httpt.Order"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Неверный формат order_uid",
                        "schema": {
                            "$ref": "#/definitions/httpt.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Заказ не найден",
                        "schema": {
                            "$ref": "#/definitions/httpt.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/httpt.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Delivery": {
            "type": "object",
            "required": [
                "address",
                "city",
                "email",
                "name",
                "phone",
                "region",
                "zip"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500
                },
                "city": {
                    "type": "string",
                    "maxLength": 100
                },
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "phone": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "maxLength": 100
                },
                "zip": {
                    "type": "string",
                    "maxLength": 20
                }
            }
        },
        "entity.Item": {
            "type": "object",
            "required": [
                "brand",
                "chrt_id",
                "name",
                "nm_id",
                "price",
                "rid",
                "size",
                "total_price",
                "track_number"
            ],
            "properties": {
                "brand": {
                    "type": "string",
                    "maxLength": 100
                },
                "chrt_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "nm_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "price": {
                    "type": "integer",
                    "minimum": 1
                },
                "rid": {
                    "type": "string"
                },
                "sale": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0
                },
                "size": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "minimum": 0
                },
                "total_price": {
                    "type": "integer",
                    "minimum": 1
                },
                "track_number": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "entity.Payment": {
            "type": "object",
            "required": [
                "amount",
                "bank",
                "currency",
                "delivery_cost",
                "goods_total",
                "payment_dt",
                "provider",
                "transaction"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1
                },
                "bank": {
                    "type": "string",
                    "maxLength": 50
                },
                "currency": {
                    "type": "string"
                },
                "custom_fee": {
                    "type": "integer",
                    "minimum": 0
                },
                "delivery_cost": {
                    "type": "integer",
                    "minimum": 0
                },
                "goods_total": {
                    "type": "integer",
                    "minimum": 1
                },
                "payment_dt": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string",
                    "maxLength": 50
                },
                "request_id": {
                    "type": "string",
                    "maxLength": 50
                },
                "transaction": {
                    "type": "string"
                }
            }
        },
        "httpt.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "httpt.Order": {
            "type": "object",
            "required": [
                "customer_id",
                "date_created",
                "delivery",
                "delivery_service",
                "entry",
                "items",
                "locale",
                "oof_shard",
                "order_uid",
                "payment",
                "shardkey",
                "sm_id",
                "track_number"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "maxLength": 50
                },
                "date_created": {
                    "type": "string"
                },
                "delivery": {
                    "$ref": "#/definitions/entity.Delivery"
                },
                "delivery_service": {
                    "type": "string",
                    "maxLength": 50
                },
                "entry": {
                    "type": "string",
                    "maxLength": 10
                },
                "internal_signature": {
                    "type": "string",
                    "maxLength": 255
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/entity.Item"
                    }
                },
                "locale": {
                    "type": "string"
                },
                "oof_shard": {
                    "type": "string"
                },
                "order_uid": {
                    "type": "string"
                },
                "payment": {
                    "$ref": "#/definitions/entity.Payment"
                },
                "shardkey": {
                    "type": "string",
                    "maxLength": 10
                },
                "sm_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "track_number": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "httpt.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Order Service API",
	Description:      "API для управления заказами",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
