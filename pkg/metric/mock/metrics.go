// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/metric/metrics.go

// Package mock_metric is a generated GoMock package.
package mock_metric

import (
	http "net/http"
	reflect "reflect"
	time "time"
	metric "wbtest/pkg/metric"

	gomock "github.com/golang/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Cache mocks base method.
func (m *MockFactory) Cache() metric.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(metric.Cache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockFactoryMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockFactory)(nil).Cache))
}

// DLQ mocks base method.
func (m *MockFactory) DLQ() metric.DLQ {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DLQ")
	ret0, _ := ret[0].(metric.DLQ)
	return ret0
}

// DLQ indicates an expected call of DLQ.
func (mr *MockFactoryMockRecorder) DLQ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DLQ", reflect.TypeOf((*MockFactory)(nil).DLQ))
}

// HTTP mocks base method.
func (m *MockFactory) HTTP() metric.HTTP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTP")
	ret0, _ := ret[0].(metric.HTTP)
	return ret0
}

// HTTP indicates an expected call of HTTP.
func (mr *MockFactoryMockRecorder) HTTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTP", reflect.TypeOf((*MockFactory)(nil).HTTP))
}

// Handler mocks base method.
func (m *MockFactory) Handler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockFactoryMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockFactory)(nil).Handler))
}

// Kafka mocks base method.
func (m *MockFactory) Kafka() metric.Kafka {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kafka")
	ret0, _ := ret[0].(metric.Kafka)
	return ret0
}

// Kafka indicates an expected call of Kafka.
func (mr *MockFactoryMockRecorder) Kafka() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kafka", reflect.TypeOf((*MockFactory)(nil).Kafka))
}

// Transaction mocks base method.
func (m *MockFactory) Transaction() metric.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(metric.Transaction)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockFactoryMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockFactory)(nil).Transaction))
}

// MockHTTP is a mock of HTTP interface.
type MockHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMockRecorder
}

// MockHTTPMockRecorder is the mock recorder for MockHTTP.
type MockHTTPMockRecorder struct {
	mock *MockHTTP
}

// NewMockHTTP creates a new mock instance.
func NewMockHTTP(ctrl *gomock.Controller) *MockHTTP {
	mock := &MockHTTP{ctrl: ctrl}
	mock.recorder = &MockHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTP) EXPECT() *MockHTTPMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockHTTP) Request(method, path string, status int, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Request", method, path, status, duration)
}

// Request indicates an expected call of Request.
func (mr *MockHTTPMockRecorder) Request(method, path, status, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockHTTP)(nil).Request), method, path, status, duration)
}

// SlowRequest mocks base method.
func (m *MockHTTP) SlowRequest(method, path string, status int, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SlowRequest", method, path, status, duration)
}

// SlowRequest indicates an expected call of SlowRequest.
func (mr *MockHTTPMockRecorder) SlowRequest(method, path, status, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlowRequest", reflect.TypeOf((*MockHTTP)(nil).SlowRequest), method, path, status, duration)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// IncrementFailures mocks base method.
func (m *MockTransaction) IncrementFailures(operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementFailures", operation)
}

// IncrementFailures indicates an expected call of IncrementFailures.
func (mr *MockTransactionMockRecorder) IncrementFailures(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFailures", reflect.TypeOf((*MockTransaction)(nil).IncrementFailures), operation)
}

// IncrementRetries mocks base method.
func (m *MockTransaction) IncrementRetries(operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementRetries", operation)
}

// IncrementRetries indicates an expected call of IncrementRetries.
func (mr *MockTransactionMockRecorder) IncrementRetries(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRetries", reflect.TypeOf((*MockTransaction)(nil).IncrementRetries), operation)
}

// ObserveDuration mocks base method.
func (m *MockTransaction) ObserveDuration(operation string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveDuration", operation, duration)
}

// ObserveDuration indicates an expected call of ObserveDuration.
func (mr *MockTransactionMockRecorder) ObserveDuration(operation, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDuration", reflect.TypeOf((*MockTransaction)(nil).ObserveDuration), operation, duration)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Eviction mocks base method.
func (m *MockCache) Eviction(cacheType, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Eviction", cacheType, reason)
}

// Eviction indicates an expected call of Eviction.
func (mr *MockCacheMockRecorder) Eviction(cacheType, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eviction", reflect.TypeOf((*MockCache)(nil).Eviction), cacheType, reason)
}

// Hit mocks base method.
func (m *MockCache) Hit(cacheType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hit", cacheType)
}

// Hit indicates an expected call of Hit.
func (mr *MockCacheMockRecorder) Hit(cacheType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockCache)(nil).Hit), cacheType)
}

// Miss mocks base method.
func (m *MockCache) Miss(cacheType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Miss", cacheType)
}

// Miss indicates an expected call of Miss.
func (mr *MockCacheMockRecorder) Miss(cacheType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Miss", reflect.TypeOf((*MockCache)(nil).Miss), cacheType)
}

// Size mocks base method.
func (m *MockCache) Size(cacheType string, size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Size", cacheType, size)
}

// Size indicates an expected call of Size.
func (mr *MockCacheMockRecorder) Size(cacheType, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCache)(nil).Size), cacheType, size)
}

// MockKafka is a mock of Kafka interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// ConsumerGroupLag mocks base method.
func (m *MockKafka) ConsumerGroupLag(topic string, partition int, lag int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumerGroupLag", topic, partition, lag)
}

// ConsumerGroupLag indicates an expected call of ConsumerGroupLag.
func (mr *MockKafkaMockRecorder) ConsumerGroupLag(topic, partition, lag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerGroupLag", reflect.TypeOf((*MockKafka)(nil).ConsumerGroupLag), topic, partition, lag)
}

// MessageFailed mocks base method.
func (m *MockKafka) MessageFailed(topic string, partition int, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageFailed", topic, partition, reason)
}

// MessageFailed indicates an expected call of MessageFailed.
func (mr *MockKafkaMockRecorder) MessageFailed(topic, partition, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageFailed", reflect.TypeOf((*MockKafka)(nil).MessageFailed), topic, partition, reason)
}

// MessageProcessed mocks base method.
func (m *MockKafka) MessageProcessed(topic string, partition int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageProcessed", topic, partition)
}

// MessageProcessed indicates an expected call of MessageProcessed.
func (mr *MockKafkaMockRecorder) MessageProcessed(topic, partition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageProcessed", reflect.TypeOf((*MockKafka)(nil).MessageProcessed), topic, partition)
}

// MockDLQ is a mock of DLQ interface.
type MockDLQ struct {
	ctrl     *gomock.Controller
	recorder *MockDLQMockRecorder
}

// MockDLQMockRecorder is the mock recorder for MockDLQ.
type MockDLQMockRecorder struct {
	mock *MockDLQ
}

// NewMockDLQ creates a new mock instance.
func NewMockDLQ(ctrl *gomock.Controller) *MockDLQ {
	mock := &MockDLQ{ctrl: ctrl}
	mock.recorder = &MockDLQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQ) EXPECT() *MockDLQMockRecorder {
	return m.recorder
}

// DLError mocks base method.
func (m *MockDLQ) DLError(topic, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DLError", topic, reason)
}

// DLError indicates an expected call of DLError.
func (mr *MockDLQMockRecorder) DLError(topic, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DLError", reflect.TypeOf((*MockDLQ)(nil).DLError), topic, reason)
}

// DLRetryCount mocks base method.
func (m *MockDLQ) DLRetryCount(originalTopic string, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DLRetryCount", originalTopic, retryCount)
}

// DLRetryCount indicates an expected call of DLRetryCount.
func (mr *MockDLQMockRecorder) DLRetryCount(originalTopic, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DLRetryCount", reflect.TypeOf((*MockDLQ)(nil).DLRetryCount), originalTopic, retryCount)
}

// DLSent mocks base method.
func (m *MockDLQ) DLSent(topic, originalTopic string, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DLSent", topic, originalTopic, retryCount)
}

// DLSent indicates an expected call of DLSent.
func (mr *MockDLQMockRecorder) DLSent(topic, originalTopic, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DLSent", reflect.TypeOf((*MockDLQ)(nil).DLSent), topic, originalTopic, retryCount)
}
