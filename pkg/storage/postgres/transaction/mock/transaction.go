// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/storage/postgres/transaction/manager.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	context "context"
	reflect "reflect"
	postgres "wbtest/pkg/storage/postgres"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ExecuteInTransaction mocks base method.
func (m *MockManager) ExecuteInTransaction(ctx context.Context, operation string, fn func(postgres.QueryExecuter) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInTransaction", ctx, operation, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteInTransaction indicates an expected call of ExecuteInTransaction.
func (mr *MockManagerMockRecorder) ExecuteInTransaction(ctx, operation, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInTransaction", reflect.TypeOf((*MockManager)(nil).ExecuteInTransaction), ctx, operation, fn)
}
