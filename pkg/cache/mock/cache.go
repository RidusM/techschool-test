// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/cache/cache.go
//
// Generated by this command:
//
//	mockgen -source ./pkg/cache/cache.go -destination ./pkg/cache/mock/cache.go -package=mock_cache
//

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder[K, V]
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder[K comparable, V any] struct {
	mock *MockCache[K, V]
}

// NewMockCache creates a new mock instance.
func NewMockCache[K comparable, V any](ctrl *gomock.Controller) *MockCache[K, V] {
	mock := &MockCache[K, V]{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache[K, V]) EXPECT() *MockCacheMockRecorder[K, V] {
	return m.recorder
}

// Capacity mocks base method.
func (m *MockCache[K, V]) Capacity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capacity")
	ret0, _ := ret[0].(int)
	return ret0
}

// Capacity indicates an expected call of Capacity.
func (mr *MockCacheMockRecorder[K, V]) Capacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capacity", reflect.TypeOf((*MockCache[K, V])(nil).Capacity))
}

// Get mocks base method.
func (m *MockCache[K, V]) Get(key K) (V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder[K, V]) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache[K, V])(nil).Get), key)
}

// Has mocks base method.
func (m *MockCache[K, V]) Has(key K) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCacheMockRecorder[K, V]) Has(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCache[K, V])(nil).Has), key)
}

// Len mocks base method.
func (m *MockCache[K, V]) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacheMockRecorder[K, V]) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCache[K, V])(nil).Len))
}

// Purge mocks base method.
func (m *MockCache[K, V]) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge.
func (mr *MockCacheMockRecorder[K, V]) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockCache[K, V])(nil).Purge))
}

// Put mocks base method.
func (m *MockCache[K, V]) Put(key K, value V, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value, ttl)
}

// Put indicates an expected call of Put.
func (mr *MockCacheMockRecorder[K, V]) Put(key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCache[K, V])(nil).Put), key, value, ttl)
}

// SetOnEvicted mocks base method.
func (m *MockCache[K, V]) SetOnEvicted(onEvicted func(K, V)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnEvicted", onEvicted)
}

// SetOnEvicted indicates an expected call of SetOnEvicted.
func (mr *MockCacheMockRecorder[K, V]) SetOnEvicted(onEvicted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnEvicted", reflect.TypeOf((*MockCache[K, V])(nil).SetOnEvicted), onEvicted)
}

// StartCleanup mocks base method.
func (m *MockCache[K, V]) StartCleanup(interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCleanup", interval)
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockCacheMockRecorder[K, V]) StartCleanup(interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockCache[K, V])(nil).StartCleanup), interval)
}

// StopCleanup mocks base method.
func (m *MockCache[K, V]) StopCleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopCleanup")
}

// StopCleanup indicates an expected call of StopCleanup.
func (mr *MockCacheMockRecorder[K, V]) StopCleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCleanup", reflect.TypeOf((*MockCache[K, V])(nil).StopCleanup))
}
