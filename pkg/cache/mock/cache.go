// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"
	time "time"
	entity "wbtest/internal/entity"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Capacity mocks base method.
func (m *MockCache) Capacity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capacity")
	ret0, _ := ret[0].(int)
	return ret0
}

// Capacity indicates an expected call of Capacity.
func (mr *MockCacheMockRecorder) Capacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capacity", reflect.TypeOf((*MockCache)(nil).Capacity))
}

// Get mocks base method.
func (m *MockCache) Get(key uuid.UUID) (*entity.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Has mocks base method.
func (m *MockCache) Has(key uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCacheMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCache)(nil).Has), key)
}

// Len mocks base method.
func (m *MockCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCache)(nil).Len))
}

// Purge mocks base method.
func (m *MockCache) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge.
func (mr *MockCacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockCache)(nil).Purge))
}

// Put mocks base method.
func (m *MockCache) Put(key uuid.UUID, value *entity.Order, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value, ttl)
}

// Put indicates an expected call of Put.
func (mr *MockCacheMockRecorder) Put(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCache)(nil).Put), key, value, ttl)
}

// SetOnEvicted mocks base method.
func (m *MockCache) SetOnEvicted(onEvicted func(uuid.UUID, *entity.Order)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnEvicted", onEvicted)
}

// SetOnEvicted indicates an expected call of SetOnEvicted.
func (mr *MockCacheMockRecorder) SetOnEvicted(onEvicted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnEvicted", reflect.TypeOf((*MockCache)(nil).SetOnEvicted), onEvicted)
}

// StartCleanup mocks base method.
func (m *MockCache) StartCleanup(interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCleanup", interval)
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockCacheMockRecorder) StartCleanup(interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockCache)(nil).StartCleanup), interval)
}

// StopCleanup mocks base method.
func (m *MockCache) StopCleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopCleanup")
}

// StopCleanup indicates an expected call of StopCleanup.
func (mr *MockCacheMockRecorder) StopCleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCleanup", reflect.TypeOf((*MockCache)(nil).StopCleanup))
}
