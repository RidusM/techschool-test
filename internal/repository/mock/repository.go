// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	entity "wbtest/internal/entity"
	postgres "wbtest/pkg/storage/postgres"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDeliveryRepository is a mock of DeliveryRepository interface.
type MockDeliveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryRepositoryMockRecorder
}

// MockDeliveryRepositoryMockRecorder is the mock recorder for MockDeliveryRepository.
type MockDeliveryRepositoryMockRecorder struct {
	mock *MockDeliveryRepository
}

// NewMockDeliveryRepository creates a new mock instance.
func NewMockDeliveryRepository(ctrl *gomock.Controller) *MockDeliveryRepository {
	mock := &MockDeliveryRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryRepository) EXPECT() *MockDeliveryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeliveryRepository) Create(ctx context.Context, queryExecuter postgres.QueryExecuter, orderUID uuid.UUID, delivery *entity.Delivery) (*entity.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, queryExecuter, orderUID, delivery)
	ret0, _ := ret[0].(*entity.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeliveryRepositoryMockRecorder) Create(ctx, queryExecuter, orderUID, delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeliveryRepository)(nil).Create), ctx, queryExecuter, orderUID, delivery)
}

// GetByOrderUID mocks base method.
func (m *MockDeliveryRepository) GetByOrderUID(ctx context.Context, orderUID uuid.UUID) (*entity.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderUID", ctx, orderUID)
	ret0, _ := ret[0].(*entity.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderUID indicates an expected call of GetByOrderUID.
func (mr *MockDeliveryRepositoryMockRecorder) GetByOrderUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderUID", reflect.TypeOf((*MockDeliveryRepository)(nil).GetByOrderUID), ctx, orderUID)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(ctx context.Context, queryExecuter postgres.QueryExecuter, orderUID uuid.UUID, items []*entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, queryExecuter, orderUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(ctx, queryExecuter, orderUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), ctx, queryExecuter, orderUID, items)
}

// GetListByOrderUID mocks base method.
func (m *MockItemRepository) GetListByOrderUID(ctx context.Context, orderUID uuid.UUID) ([]*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByOrderUID", ctx, orderUID)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByOrderUID indicates an expected call of GetListByOrderUID.
func (mr *MockItemRepositoryMockRecorder) GetListByOrderUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByOrderUID", reflect.TypeOf((*MockItemRepository)(nil).GetListByOrderUID), ctx, orderUID)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, queryExecuter postgres.QueryExecuter, order *entity.Order) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, queryExecuter, order)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, queryExecuter, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, queryExecuter, order)
}

// GetAllOrderUIDs mocks base method.
func (m *MockOrderRepository) GetAllOrderUIDs(ctx context.Context) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderUIDs", ctx)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderUIDs indicates an expected call of GetAllOrderUIDs.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrderUIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderUIDs", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrderUIDs), ctx)
}

// GetByOrderUID mocks base method.
func (m *MockOrderRepository) GetByOrderUID(ctx context.Context, orderUID uuid.UUID) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderUID", ctx, orderUID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderUID indicates an expected call of GetByOrderUID.
func (mr *MockOrderRepositoryMockRecorder) GetByOrderUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderUID", reflect.TypeOf((*MockOrderRepository)(nil).GetByOrderUID), ctx, orderUID)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(ctx context.Context, queryExecuter postgres.QueryExecuter, orderUID uuid.UUID, payment *entity.Payment) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, queryExecuter, orderUID, payment)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, queryExecuter, orderUID, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, queryExecuter, orderUID, payment)
}

// GetByOrderUID mocks base method.
func (m *MockPaymentRepository) GetByOrderUID(ctx context.Context, orderUID uuid.UUID) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderUID", ctx, orderUID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderUID indicates an expected call of GetByOrderUID.
func (mr *MockPaymentRepositoryMockRecorder) GetByOrderUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderUID", reflect.TypeOf((*MockPaymentRepository)(nil).GetByOrderUID), ctx, orderUID)
}
